The Neo4J database initialization/querying script utilizes py2neo to connect to the server. First, the server connection is authenticated using the default username (‘neo4j’) and password (‘password’).
        The script has three major functions: produce_graph, query_one, and query_two. Produce_graph loads the nodes and relationships, corresponding to the partitioned tsv files. At times, the field terminator had issues depending on the host system, which was the source of some confusion. The function also assigns ‘id’, ‘name’ and ‘kind’ properties to nodes, in addition to creating text indexes. This way, the database can optimize queries based on certain properties. The nodes and relationships were assigned labels, as well. 
        Query_one finds information about a specified disease, such as the compound treatments, genes afflicted and location. It uses the ‘OPTIONAL MATCH’ command to find the requested relationships. Additionally, we had to use older methods of interpolating the resultant string because py2neo throws errors when we use curly braces. Finally, the results are printed.
Query_two find all compounds that can treat a new disease. It accomplishes this by initially filtering diseases which lack relationships with compound nodes. Next, a compound match statement is used to fulfill the query requirements. The relationships’ “metaedge” property was used to determine which relationships involved upregulating and downregulating. Finally, the results are printed as a list. 
Lastly, the mainfile.py involves a simple interface for querying and creating databases.